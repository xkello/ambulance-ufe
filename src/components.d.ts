/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface XkelloAmbulanceWlApp {
        "basePath": string;
    }
    interface XkelloAmbulanceWlEditor {
        "entryId": string;
    }
    interface XkelloAmbulanceWlList {
    }
}
export interface XkelloAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXkelloAmbulanceWlEditorElement;
}
export interface XkelloAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXkelloAmbulanceWlListElement;
}
declare global {
    interface HTMLXkelloAmbulanceWlAppElement extends Components.XkelloAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLXkelloAmbulanceWlAppElement: {
        prototype: HTMLXkelloAmbulanceWlAppElement;
        new (): HTMLXkelloAmbulanceWlAppElement;
    };
    interface HTMLXkelloAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLXkelloAmbulanceWlEditorElement extends Components.XkelloAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXkelloAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLXkelloAmbulanceWlEditorElement, ev: XkelloAmbulanceWlEditorCustomEvent<HTMLXkelloAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXkelloAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLXkelloAmbulanceWlEditorElement, ev: XkelloAmbulanceWlEditorCustomEvent<HTMLXkelloAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXkelloAmbulanceWlEditorElement: {
        prototype: HTMLXkelloAmbulanceWlEditorElement;
        new (): HTMLXkelloAmbulanceWlEditorElement;
    };
    interface HTMLXkelloAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLXkelloAmbulanceWlListElement extends Components.XkelloAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXkelloAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLXkelloAmbulanceWlListElement, ev: XkelloAmbulanceWlListCustomEvent<HTMLXkelloAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXkelloAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLXkelloAmbulanceWlListElement, ev: XkelloAmbulanceWlListCustomEvent<HTMLXkelloAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXkelloAmbulanceWlListElement: {
        prototype: HTMLXkelloAmbulanceWlListElement;
        new (): HTMLXkelloAmbulanceWlListElement;
    };
    interface HTMLElementTagNameMap {
        "xkello-ambulance-wl-app": HTMLXkelloAmbulanceWlAppElement;
        "xkello-ambulance-wl-editor": HTMLXkelloAmbulanceWlEditorElement;
        "xkello-ambulance-wl-list": HTMLXkelloAmbulanceWlListElement;
    }
}
declare namespace LocalJSX {
    interface XkelloAmbulanceWlApp {
        "basePath"?: string;
    }
    interface XkelloAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: XkelloAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface XkelloAmbulanceWlList {
        "onEntry-clicked"?: (event: XkelloAmbulanceWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "xkello-ambulance-wl-app": XkelloAmbulanceWlApp;
        "xkello-ambulance-wl-editor": XkelloAmbulanceWlEditor;
        "xkello-ambulance-wl-list": XkelloAmbulanceWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "xkello-ambulance-wl-app": LocalJSX.XkelloAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLXkelloAmbulanceWlAppElement>;
            "xkello-ambulance-wl-editor": LocalJSX.XkelloAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLXkelloAmbulanceWlEditorElement>;
            "xkello-ambulance-wl-list": LocalJSX.XkelloAmbulanceWlList & JSXBase.HTMLAttributes<HTMLXkelloAmbulanceWlListElement>;
        }
    }
}
